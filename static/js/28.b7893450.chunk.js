(this["webpackJsonpmy-app"]=this["webpackJsonpmy-app"]||[]).push([[28],{648:function(e,t,i){"use strict";i.d(t,"a",(function(){return S}));var a,r=i(0),l=i(45),s=i(20),n=i(9),o=i(53),c=i(11),h=i(355),p=i(147),u=i(13),d=i(70),b=i(14),m=i(18),v=i(1),y=i(8),f=(i(5),i(31)),O=i(2),j=i(6);class g{constructor(){this.location={left:0,top:0,width:0,height:0},this._allAvailability="unknown",this.byteSize=40}getAvailability(e,t){if("unknown"!==this._allAvailability)return this._allAvailability;const i=(e-this.location.top)*this.location.width+(t-this.location.left),a=i%8,r=i>>3,l=this._tileAvailabilityBitSet;return r<0||r>l.length?"unknown":l[r]&1<<a?"available":"unavailable"}_updateFromData(e){const t=this.location.width,i=this.location.height;let a=!0,r=!0;const l=Math.ceil(t*i/8),s=new Uint8Array(l);let n=0;for(let o=0;o<e.length;o++){const t=o%8;e[o]?(r=!1,s[n]|=1<<t):a=!1,7===t&&++n}r?this._allAvailability="unavailable":a?this._allAvailability="available":(this._allAvailability="unknown",this._tileAvailabilityBitSet=s,this.byteSize+=s.length)}static fromDefinition(e,t){const i=e.service.request||l.default,{row:a,col:r,width:s,height:o}=e,c={query:{f:"json"}};return t=t?{...c,...t}:c,i(function(e){let t;if("vector-tile"===e.service.type)t=`${e.service.url}/tilemap/${e.level}/${e.row}/${e.col}/${e.width}/${e.height}`;else{const i=e.service.tileServers;t=`${i&&i.length?i[e.row%i.length]:e.service.url}/tilemap/${e.level}/${e.row}/${e.col}/${e.width}/${e.height}`}const i=e.service.query;return i&&(t=`${t}?${i}`),t}(e),t).then(e=>e.data).catch(e=>{if(e&&e.details&&422===e.details.httpStatus)return{location:{top:a,left:r,width:s,height:o},valid:!0,data:Object(y.b)(s*o,0)};throw e}).then(e=>{if(e.location&&(e.location.top!==a||e.location.left!==r||e.location.width!==s||e.location.height!==o))throw new n.a("tilemap:location-mismatch","Tilemap response for different location than requested",{response:e,definition:{top:a,left:r,width:s,height:o}});return g.fromJSON(e)})}static fromJSON(e){g.validateJSON(e);const t=new g;return t.location=Object.freeze(Object(j.a)(e.location)),t._updateFromData(e.data),Object.freeze(t)}static validateJSON(e){if(!e||!e.location)throw new n.a("tilemap:missing-location","Location missing from tilemap response");if(!1===e.valid)throw new n.a("tilemap:invalid","Tilemap response was marked as invalid");if(!e.data)throw new n.a("tilemap:missing-data","Data missing from tilemap response");if(!Array.isArray(e.data))throw new n.a("tilemap:data-mismatch","Data must be an array of numbers");if(e.data.length!==e.location.width*e.location.height)throw new n.a("tilemap:data-mismatch","Number of data items does not match width/height of tilemap")}}function _(e){return`${e.level}/${e.row}/${e.col}/${e.width}/${e.height}`}const w=c.a.getLogger("esri.layers.support.TilemapCache");let S=a=class extends s.a{constructor(e){super(e),this._handles=new o.a,this._pendingTilemapRequests={},this._availableLevels={},this.levels=5,this.cacheByteSize=2097152,this.request=l.default,this._prefetchingEnabled=!0}initialize(){this._tilemapCache=new h.a(this.cacheByteSize),this._handles.add([this.watch(["layer.parsedUrl","layer.tileServers?"],()=>this._initializeTilemapDefinition()),Object(m.a)(this,"layer.tileInfo.lods",e=>this._initializeAvailableLevels(e),!0)]),this._initializeTilemapDefinition()}destroy(){this._handles&&(this._handles.destroy(),this._handles=null)}castLevels(e){return e<=2?(w.error("Minimum levels for Tilemap is 3, but got ",e),3):e}get size(){return 1<<this.levels}fetchTilemap(e,t,i,a){if(!this._availableLevels[e])return Promise.reject(new n.a("tilemap-cache:level-unavailable",`Level ${e} is unavailable in the service`));const r=this._tmpTilemapDefinition,l=this._tilemapFromCache(e,t,i,r);if(l)return Promise.resolve(l);const s=a&&a.signal;return a={...a,signal:null},new Promise((e,t)=>{Object(u.p)(s,()=>t(Object(u.d)()));const i=_(r);let l=this._pendingTilemapRequests[i];if(!l){l=g.fromDefinition(r,a).then(e=>(this._tilemapCache.put(i,e,e.byteSize),e));const e=()=>delete this._pendingTilemapRequests[i];this._pendingTilemapRequests[i]=l,l.then(e,e)}l.then(e,t)})}getAvailability(e,t,i){if(!this._availableLevels[e])return"unavailable";const a=this._tilemapFromCache(e,t,i,this._tmpTilemapDefinition);return a?a.getAvailability(t,i):"unknown"}getAvailabilityUpsample(e,t,i,a){a.level=e,a.row=t,a.col=i;const r=this.layer.tileInfo;for(r.updateTileInfo(a);;){const e=this.getAvailability(a.level,a.row,a.col);if("unavailable"!==e)return e;if(!r.upsampleTile(a))return"unavailable"}}fetchAvailability(e,t,i,a){return this._availableLevels[e]?this.fetchTilemap(e,t,i,a).catch(e=>e).then(a=>{if(a instanceof g){const r=a.getAvailability(t,i);return"unavailable"===r?Promise.reject(new n.a("tile-map:tile-unavailable","Tile is not available",{level:e,row:t,col:i})):r}if(Object(u.l)(a))throw a;return"unknown"}):Promise.reject(new n.a("tilemap-cache:level-unavailable",`Level ${e} is unavailable in the service`))}fetchAvailabilityUpsample(e,t,i,a,r){a.level=e,a.row=t,a.col=i;const l=this.layer.tileInfo;l.updateTileInfo(a);const s=this.fetchAvailability(e,t,i,r).catch(e=>{if(Object(u.l)(e))throw e;if(l.upsampleTile(a))return this.fetchAvailabilityUpsample(a.level,a.row,a.col,a);throw e});return this._fetchAvailabilityUpsamplePrefetch(a.id,e,t,i,r,s),s}async _fetchAvailabilityUpsamplePrefetch(e,t,i,r,l,s){if(!this._prefetchingEnabled)return;const n="prefetch-"+e;if(this._handles.has(n))return;const o=new AbortController;s.then(()=>o.abort(),()=>o.abort());let c=!1;const h={remove(){c||(c=!0,o.abort())}};if(this._handles.add(h,n),await Object(d.c)(10,o.signal).catch(()=>{}),c||(c=!0,this._handles.remove(n)),Object(u.m)(o))return;const p={id:e,level:t,row:i,col:r},b={...l,signal:o.signal},m=this.layer.tileInfo;for(let u=0;a._prefetches.length<a._maxPrefetch&&m.upsampleTile(p);++u){const e=this.fetchAvailability(p.level,p.row,p.col,b);a._prefetches.push(e);const t=()=>{a._prefetches.removeUnordered(e)};e.then(t,t)}}_initializeTilemapDefinition(){if(!this.layer.parsedUrl)return;const e=this.layer.parsedUrl,t=e.query;this._tilemapCache.clear(),this._tmpTilemapDefinition={service:{url:e.path,query:t?Object(b.E)(t):null,tileServers:this.layer.tileServers,request:this.request,type:this.layer.type},width:this.size,height:this.size,level:0,row:0,col:0}}_tilemapFromCache(e,t,i,a){a.level=e,a.row=t-t%this.size,a.col=i-i%this.size;const r=_(a);return this._tilemapCache.get(r)}_initializeAvailableLevels(e){this._availableLevels={},e&&e.forEach(e=>this._availableLevels[e.level]=!0)}get test(){const e=this;return{get prefetchingEnabled(){return e._prefetchingEnabled},set prefetchingEnabled(t){e._prefetchingEnabled=t},hasTilemap:(t,i,a)=>!!e._tilemapFromCache(t,i,a,e._tmpTilemapDefinition)}}};S._maxPrefetch=4,S._prefetches=new p.a({initialSize:a._maxPrefetch}),Object(r.a)([Object(v.b)({constructOnly:!0,type:Number})],S.prototype,"levels",void 0),Object(r.a)([Object(f.a)("levels")],S.prototype,"castLevels",null),Object(r.a)([Object(v.b)({readOnly:!0,type:Number})],S.prototype,"size",null),Object(r.a)([Object(v.b)({constructOnly:!0,type:Number})],S.prototype,"cacheByteSize",void 0),Object(r.a)([Object(v.b)({constructOnly:!0})],S.prototype,"layer",void 0),Object(r.a)([Object(v.b)({constructOnly:!0})],S.prototype,"request",void 0),S=a=Object(r.a)([Object(O.a)("esri.layers.support.TilemapCache")],S)},677:function(e,t,i){"use strict";i.d(t,"a",(function(){return l})),i.d(t,"b",(function(){return r}));var a=i(343);const r={type:a.a,json:{origins:{service:{read:{source:["tileInfo","minScale","maxScale","minLOD","maxLOD"],reader:l}}}}};function l(e,t,i,r){if(!e)return null;const{minScale:l,maxScale:s,minLOD:n,maxLOD:o}=t;if(null!=n&&null!=o)return r&&r.ignoreMinMaxLOD?a.a.fromJSON(e):a.a.fromJSON({...e,lods:e.lods.filter(({level:e})=>null!=e&&e>=n&&e<=o)});if(0!==l&&0!==s){const t=e=>Math.round(1e4*e)/1e4,i=l?t(l):1/0,r=s?t(s):-1/0;return a.a.fromJSON({...e,lods:e.lods.filter(e=>{const a=t(e.scale);return a<=i&&a>=r})})}return a.a.fromJSON(e)}},731:function(e,t,i){"use strict";i.d(t,"a",(function(){return h}));var a=i(0),r=(i(60),i(1)),l=(i(8),i(5),i(4),i(17)),s=i(2),n=i(677),o=i(648),c=i(26);const h=e=>{let t=class extends e{constructor(){super(...arguments),this.copyright=null,this.minScale=0,this.maxScale=0,this.spatialReference=null,this.tileInfo=null,this.tilemapCache=null}readMinScale(e,t){return null!=t.minLOD&&null!=t.maxLOD?e:0}readMaxScale(e,t){return null!=t.minLOD&&null!=t.maxLOD?e:0}get supportsBlankTile(){return this.version>=10.2}readTilemapCache(e,t){return t.capabilities&&t.capabilities.indexOf("Tilemap")>-1?new o.a({layer:this}):null}};return Object(a.a)([Object(r.b)({json:{read:{source:"copyrightText"}}})],t.prototype,"copyright",void 0),Object(a.a)([Object(r.b)()],t.prototype,"minScale",void 0),Object(a.a)([Object(l.a)("service","minScale")],t.prototype,"readMinScale",null),Object(a.a)([Object(r.b)()],t.prototype,"maxScale",void 0),Object(a.a)([Object(l.a)("service","maxScale")],t.prototype,"readMaxScale",null),Object(a.a)([Object(r.b)({type:c.a})],t.prototype,"spatialReference",void 0),Object(a.a)([Object(r.b)({readOnly:!0})],t.prototype,"supportsBlankTile",null),Object(a.a)([Object(r.b)(n.b)],t.prototype,"tileInfo",void 0),Object(a.a)([Object(r.b)()],t.prototype,"tilemapCache",void 0),Object(a.a)([Object(l.a)("service","tilemapCache",["capabilities"])],t.prototype,"readTilemapCache",null),Object(a.a)([Object(r.b)()],t.prototype,"version",void 0),t=Object(a.a)([Object(s.a)("esri.layers.mixins.ArcGISCachedService")],t),t}},814:function(e,t,i){"use strict";i.r(t),i.d(t,"default",(function(){return D}));var a=i(0),r=i(45),l=i(9),s=i(11),n=i(3),o=i(342),c=i(13),h=i(14),p=i(1),u=i(8),d=(i(5),i(4),i(17)),b=i(2),m=i(167),v=i(214),y=i(731),f=i(356),O=i(345),j=i(344),g=i(95),_=i(150),w=i(268);const S=s.a.getLogger("esri.core.workers.WorkerHandle");class T extends class{constructor(e,t,i,a={}){this._mainMethod=t,this._listeners=[],this._promise=Object(w.b)(e,{...a,schedule:i}).then(e=>{if(void 0===this._thread){this._thread=e,this._promise=null,a.hasInitialize&&this.broadcast({},"initialize");for(const e of this._listeners)this._connectListener(e)}else e.close()}),this._promise.catch(t=>S.error(`Failed to initialize ${e} worker: ${t}`))}on(e,t){const i={removed:!1,eventName:e,callback:t,threadHandle:null};return this._listeners.push(i),this._connectListener(i),Object(_.b)(()=>{i.removed=!0,Object(u.i)(this._listeners,i),this._thread&&Object(n.j)(i.threadHandle)&&i.threadHandle.remove()})}destroy(){this._thread&&(this._thread.close(),this._thread=null),this._promise=null}invoke(e,t){return this.invokeMethod(this._mainMethod,e,t)}invokeMethod(e,t,i){if(this._thread){const a=this.getTransferList(t,e);return this._thread.invoke(e,t,{transferList:a,signal:i})}return this._promise?this._promise.then(()=>(Object(c.u)(i),this.invokeMethod(e,t,i))):Promise.reject(null)}broadcast(e,t){return this._thread?Promise.all(this._thread.broadcast(t,e)).then(()=>{}):this._promise?this._promise.then(()=>this.broadcast(e,t)):Promise.reject()}get promise(){return this._promise}_connectListener(e){this._thread&&this._thread.on(e.eventName,e.callback).then(t=>{e.removed||(e.threadHandle=t)})}}{constructor(e=null){super("LercWorker","_decode",e,{strategy:"dedicated"}),this.schedule=e,this.ref=0}decode(e,t,i){return e&&0!==e.byteLength?this.invoke({buffer:e,options:t},i):Promise.resolve(null)}getTransferList(e){return[e.buffer]}release(){--this.ref<=0&&(L.forEach((e,t)=>{e===this&&L.delete(t)}),this.destroy())}}const L=new Map;const x=s.a.getLogger("esri.layers.ElevationLayer");let A=class extends(Object(y.a)(Object(f.a)(Object(O.a)(Object(j.a)(Object(o.a)(v.a)))))){constructor(...e){super(...e),this.copyright=null,this.heightModelInfo=null,this.path=null,this.opacity=1,this.operationalLayerType="ArcGISTiledElevationServiceLayer",this.sourceJSON=null,this.type="elevation",this.url=null,this.version=null,this._lercDecoder=function(e=null){let t=L.get(Object(n.q)(e));return t||(Object(n.j)(e)?(t=new T(t=>e.schedule(t)),L.set(e,t)):(t=new T,L.set(null,t))),++t.ref,t}()}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}destroy(){this._lercDecoder=Object(n.o)(this._lercDecoder)}set minScale(e){this.constructed&&x.warn(this.declaredClass+".minScale support has been removed (since 4.5)")}get minScale(){}set maxScale(e){this.constructed&&x.warn(this.declaredClass+".maxScale support has been removed (since 4.5)")}get maxScale(){}readVersion(e,t){let i=t.currentVersion;return i||(i=9.3),i}load(e){const t=Object(n.j)(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"],supportsData:!1,validateItem:e=>{for(let t=0;t<e.typeKeywords.length;t++)if("elevation 3d layer"===e.typeKeywords[t].toLowerCase())return!0;throw new l.a("portal:invalid-layer-item-type","Invalid layer item type '${type}', expected '${expectedType}' ",{type:"Image Service",expectedType:"Image Service Elevation 3D Layer"})}},e).catch(c.t).then(()=>this._fetchImageService(t))),Promise.resolve(this)}fetchTile(e,t,i,a){const l=Object(n.j)((a=a||{signal:null}).signal)?a.signal:a.signal=(new AbortController).signal,s={responseType:"array-buffer",signal:l},o={noDataValue:a.noDataValue,returnFileInfo:!0};return this.load().then(()=>this._fetchTileAvailability(e,t,i,a)).then(()=>Object(r.default)(this.getTileUrl(e,t,i),s)).then(e=>this._lercDecoder.decode(e.data,o,l)).then(e=>({values:e.pixelData,width:e.width,height:e.height,maxZError:e.fileInfo.maxZError,noDataValue:e.noDataValue,minValue:e.minValue,maxValue:e.maxValue}))}getTileUrl(e,t,i){const a=!this.tilemapCache&&this.supportsBlankTile,r=Object(h.E)({...this.parsedUrl.query,blankTile:!a&&null});return`${this.parsedUrl.path}/tile/${e}/${t}/${i}${r?"?"+r:""}`}async queryElevation(e,t){const{ElevationQuery:a}=await i.e(11).then(i.bind(null,1031));return Object(c.u)(t),(new a).query(this,e,t)}async createElevationSampler(e,t){const{ElevationQuery:a}=await i.e(11).then(i.bind(null,1031));return Object(c.u)(t),(new a).createSampler(this,e,t)}_fetchTileAvailability(e,t,i,a){return this.tilemapCache?this.tilemapCache.fetchAvailability(e,t,i,a):Promise.resolve("unknown")}async _fetchImageService(e){if(this.sourceJSON)return this.sourceJSON;const t={query:{f:"json",...this.parsedUrl.query},responseType:"json",signal:e},i=await Object(r.default)(this.parsedUrl.path,t);i.ssl&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=i.data,this.read(i.data,{origin:"service",url:this.parsedUrl})}get hasOverriddenFetchTile(){return!this.fetchTile.__isDefault__}};Object(a.a)([Object(p.b)({json:{read:{source:"copyrightText"}}})],A.prototype,"copyright",void 0),Object(a.a)([Object(p.b)({readOnly:!0,type:m.a})],A.prototype,"heightModelInfo",void 0),Object(a.a)([Object(p.b)({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],A.prototype,"path",void 0),Object(a.a)([Object(p.b)({type:["show","hide"]})],A.prototype,"listMode",void 0),Object(a.a)([Object(p.b)({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}}})],A.prototype,"minScale",null),Object(a.a)([Object(p.b)({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}}})],A.prototype,"maxScale",null),Object(a.a)([Object(p.b)({json:{read:!1,write:!1,origins:{"web-document":{read:!1,write:!1}}}})],A.prototype,"opacity",void 0),Object(a.a)([Object(p.b)({type:["ArcGISTiledElevationServiceLayer"]})],A.prototype,"operationalLayerType",void 0),Object(a.a)([Object(p.b)()],A.prototype,"sourceJSON",void 0),Object(a.a)([Object(p.b)({json:{read:!1},value:"elevation",readOnly:!0})],A.prototype,"type",void 0),Object(a.a)([Object(p.b)(g.n)],A.prototype,"url",void 0),Object(a.a)([Object(p.b)()],A.prototype,"version",void 0),Object(a.a)([Object(d.a)("version",["currentVersion"])],A.prototype,"readVersion",null),A=Object(a.a)([Object(b.a)("esri.layers.ElevationLayer")],A),A.prototype.fetchTile.__isDefault__=!0;const D=A}}]);
//# sourceMappingURL=28.b7893450.chunk.js.map